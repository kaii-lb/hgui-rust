// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::InputStream;
use crate::PollableInputStream;
use crate::Seekable;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "GMemoryInputStream")]
    pub struct MemoryInputStream(Object<ffi::GMemoryInputStream, ffi::GMemoryInputStreamClass>) @extends InputStream, @implements PollableInputStream, Seekable;

    match fn {
        type_ => || ffi::g_memory_input_stream_get_type(),
    }
}

impl MemoryInputStream {
    pub const NONE: Option<&'static MemoryInputStream> = None;

    #[doc(alias = "g_memory_input_stream_new")]
    pub fn new() -> MemoryInputStream {
        unsafe { InputStream::from_glib_full(ffi::g_memory_input_stream_new()).unsafe_cast() }
    }

    #[doc(alias = "g_memory_input_stream_new_from_bytes")]
    #[doc(alias = "new_from_bytes")]
    pub fn from_bytes(bytes: &glib::Bytes) -> MemoryInputStream {
        unsafe {
            InputStream::from_glib_full(ffi::g_memory_input_stream_new_from_bytes(
                bytes.to_glib_none().0,
            ))
            .unsafe_cast()
        }
    }
}

impl Default for MemoryInputStream {
    fn default() -> Self {
        Self::new()
    }
}

pub trait MemoryInputStreamExt: 'static {
    #[doc(alias = "g_memory_input_stream_add_bytes")]
    fn add_bytes(&self, bytes: &glib::Bytes);
}

impl<O: IsA<MemoryInputStream>> MemoryInputStreamExt for O {
    fn add_bytes(&self, bytes: &glib::Bytes) {
        unsafe {
            ffi::g_memory_input_stream_add_bytes(
                self.as_ref().to_glib_none().0,
                bytes.to_glib_none().0,
            );
        }
    }
}

impl fmt::Display for MemoryInputStream {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("MemoryInputStream")
    }
}
