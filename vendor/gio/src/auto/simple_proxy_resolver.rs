// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::ProxyResolver;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "GSimpleProxyResolver")]
    pub struct SimpleProxyResolver(Object<ffi::GSimpleProxyResolver, ffi::GSimpleProxyResolverClass>) @implements ProxyResolver;

    match fn {
        type_ => || ffi::g_simple_proxy_resolver_get_type(),
    }
}

impl SimpleProxyResolver {
    pub const NONE: Option<&'static SimpleProxyResolver> = None;
}

pub trait SimpleProxyResolverExt: 'static {
    #[doc(alias = "g_simple_proxy_resolver_set_default_proxy")]
    fn set_default_proxy(&self, default_proxy: Option<&str>);

    #[doc(alias = "g_simple_proxy_resolver_set_uri_proxy")]
    fn set_uri_proxy(&self, uri_scheme: &str, proxy: &str);

    #[doc(alias = "default-proxy")]
    fn default_proxy(&self) -> Option<glib::GString>;

    #[doc(alias = "ignore-hosts")]
    fn ignore_hosts(&self) -> Vec<glib::GString>;

    #[doc(alias = "default-proxy")]
    fn connect_default_proxy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "ignore-hosts")]
    fn connect_ignore_hosts_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SimpleProxyResolver>> SimpleProxyResolverExt for O {
    fn set_default_proxy(&self, default_proxy: Option<&str>) {
        unsafe {
            ffi::g_simple_proxy_resolver_set_default_proxy(
                self.as_ref().to_glib_none().0,
                default_proxy.to_glib_none().0,
            );
        }
    }

    fn set_uri_proxy(&self, uri_scheme: &str, proxy: &str) {
        unsafe {
            ffi::g_simple_proxy_resolver_set_uri_proxy(
                self.as_ref().to_glib_none().0,
                uri_scheme.to_glib_none().0,
                proxy.to_glib_none().0,
            );
        }
    }

    fn default_proxy(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self.as_ref(), "default-proxy")
    }

    fn ignore_hosts(&self) -> Vec<glib::GString> {
        glib::ObjectExt::property(self.as_ref(), "ignore-hosts")
    }

    fn connect_default_proxy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_default_proxy_trampoline<
            P: IsA<SimpleProxyResolver>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::GSimpleProxyResolver,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SimpleProxyResolver::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::default-proxy\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_default_proxy_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_ignore_hosts_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_ignore_hosts_trampoline<
            P: IsA<SimpleProxyResolver>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::GSimpleProxyResolver,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SimpleProxyResolver::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::ignore-hosts\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_ignore_hosts_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for SimpleProxyResolver {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SimpleProxyResolver")
    }
}
